졸업작품을 이거 관련으로 내봐야겠다.
굉장히 재미있는 내용이네...!

도커와 쿠버네티스 관련을 정확히 알아야한다.

내가 맨날 사용하는 방식은 가상환경을 만들고 거기에다 웹서버를 만들고 프로그램을 짜고 하는 방식이다.
결국은 뭔말이냐면 내가 원래 사용하던 방식은 AWS에 있는 Virtual Machine Server에 virtual machine인 EC2을 생성하고
거기에서 웹서버(프론트쪽)도 만들고 API서버도 만들고 배포하는 형식으로 돌아가는데 컨테이너는 다른 점이 있다.
가장 큰 점은 가벼움이랄까?

docker에다가 container을 여러개 넣어서 가동 시킬 수 있다.
예를 들어 위에서 했던 얘기인데 VM에서는 그 VM 하나당 OS도 따로 있고 거기에서 자원을 쓰기때문에 리소스 낭비 문제가 생긴다.
하지만 docker에서는 container라는 개념이 들어가는데 이 container마다 다른 소프트웨어를 배치 시킬 수 있고 한번에 구동이 가능하다
그렇니까 마이크로 서비스가 구현가능해진거임!
그리고 여기서 더 나아가 그 많은 컨테이너 관리하려면 오케스트레이션 시스템이 필요한데 그 툴을 쿠버네티스(k8s)라고 한다.

-> 엇 집가서 이번에 만든거 컨테이너로 배포 한번 해봐야겠다!! 재밌을듯? 우왕!!! 

그니까 VM은 큰 공간이 있고 그 공간안에 다시 큰 집을 만드는 느낌이면
Container는 큰 공간이 있고 그 공간안에 가볍게 집을 만드는 느낌  

그니까 container의 장점은 호환성이네 어느 환경에 가든지 해당 Host Os에 맞출 수 있다는거네...!
그래서 컨테이너는 마이크로 서비스에 모듈화 하기에 적합하다. 예를들면 API따로 Front따로 기능개발쪽 따로 하지만 컨테이너들이 묶이면 힘을 낼수 있는거지.

쿠버네티스는 컨테이너들을 관리하는 툴로 스케줄링과 로드 밸런싱등을 이용하여 모든 과정을 관리할 수 있다.
이게 뭔말이냐면 약간 VM으로 따지만 Auto scaling을 말하는데 유저의 수가 많아지면 자동으로 컨테이너를 만들고 사용자가 줄어들면 자동적으로 컨네이너수를 줄인다.
약간 AWS Auto Scaling Group을 사용하면 인스턴스의 수를 늘렸다 줄였다 하면서 사용자 니즈에 따라 맞추는 것 처럼 여기도 맞추는 것 같다.

컨테이너로 하나이상으로 구성된 가장 작은 단위를 pod라고 한다.

하이퍼스케일 데이터 센터라는 건 서버가 어느정도 규모가 있어야 하이퍼 데이터 센터라고 한다.
서버를 최대한 이용을 하려다보니까 구글이 데이터 센터를 만들었다.

VM은 OS가 있고 하이퍼가 있고 guest OS가 있는데 Container는 Host OS가 있고 Virtial box와 여러가지 모듈들이 올라간다.->이래서 OS를 구동 안시켜도 되는데 영향을 안받는다.
커널을 잘못 사용하면 다른 container들 다 죽는다. 안정성이 떨어진다. 
초창기에는 여건이 안좋았지만 현재 구글 시스템을 container로 운영하고 있어서 지금은 각광받고 있다고 한다.
 

상윤님의 설명으로는 쿠버네티스는 구글에서 발명된거라고 한다.
일단 쿠버네티스의 장점은 리소스 낭비가 없다는게 가장 큰 장점으로 여러 VM의 경우는 os를 가지고 있기때문에 자원 낭비가 심하다고 한다.
그러나 container 기반은 OS를 공유하고 있어서 편하고 master가 컨네이너들을 관리하기 때문에 배포와 운영이 편하다.
